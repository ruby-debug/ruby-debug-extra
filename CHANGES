0.6
- Added two output formats: plain and xml

0.5.1
- Bugfixes.

0.5
- Added post-mortem debugging
- Added 'irb' command.

0.4.5
- Fixed debug_method when applied to setter.
- Added 'reload' command which can be used to reload source code in case it's been changed.
- Added Debugger.reload_source_on_change option (true, by default) which controls whether ruby-debug should keep
  track of the source files modification time and reload them if they've been changed.

0.4.4
- Renamed Context#set_suspend and Context#clear_suspend methods to Context#suspend and Context#resume respectively.
- Context#resume method not only clears suspend flag, but also resumes the thread execution.
- Bugfixes.

0.4.3
- Added Debugger.skip method which allows escaping a block from the debugger reach.
- Bugfixes.

0.4.2
- Module#deubg_method added.
- Added rdoc.
- Bugfixes.

0.4.1
- New binding_n method for Kernel module.
- Bugfixes.

0.4 
- Debugger.start method takes a block. If a block is specified, this method starts debugger, yields to the block
  and stops debugger at the end.
- 'tm[ate]' command accepts a frame number now.
- 'list' command accepts on/off parameter which controls whether listing will be displayed on every stop.
- 'eval on/off' controls the evaluation of unknown command.
- Debugger reads readline history file .rdebug_hist at startup and saves it at exit.
- 'sa[ve] <file>' command can be used to save current breackpoints and catchpoint if any
- 'sc[ript] <file>' command can be used to run script file. Script files can contain only control commands.
- rdebug script accepts '--script FILE' parameter.
- thread commands are available for the control port.

0.3 (2006-08-07)
- Renamed Debugger.start_server to Debugger.start_remote.
- Debugger.start_remote activates debugger by calling Debugger.start.
- Debugger.start_remote starts a control thread which listen on port 8990 and accepts control 
  commands, such as adding/deleting breakpoints, assigning catchpoint, etc. (Useful for GUI integration)
- New Debugger.wait_connection option. When it's true, Debugger.start_remote waits until
  a remote connection is made.
- New Debugger.stop_on_connect option. When a remote connection is established, debugger
  stops the main thread (Thread.main).
- 'interrupt' command is available for the control thread.

0.2.1 (2006-07-29)
- 'f[rame] nn' command selects a numbered frame. Frame numbers can be obtained by running frame 
  command without parameters.
- 'l[ist] =' show code in the context of the current line.
- 'tm[ate]' opens the current file in TextMate. Available only on Mac OSX. 

0.2 (2006-07-17)
- Added the remote debugging. It should be activated by calling Debugger#start_server method.
- CHANGED: In order to activate the debugger, it's not enough to require 'ruby-debug'. 
  Debugger#start method must be called explicitly.
- Debugger used to evaluate anything you enter as long as it's not a command. Starting from
  this version the 'eval' command must be used to evaluate an expression.

0.1.5 (2006-07-13)
- Now the check for a  breakpoint uses base filename of the source file.
- Removed compilation warnings when compiling with -Wall

0.1.4 (2006-07-12)
- Remembers the previous command. Invoke it by typing a carriage return
  at the command prompt.

0.1.3 (2006-07-11)
- Conditional breakpoints
- Bugfixes

0.1.2 (2006-07-16)
========================

- Initial release.
