gcd.rb:4
def gcd(a, b)
# # ***************************************************
# # This tests step, next, finish and continue
# # ***************************************************
# set debuggertesting on
Currently testing the debugger is on.
# set callstyle last
Frame call-display style is last.
# break 6
Breakpoint 1 file gcd.rb, line 6
# continue
Breakpoint 1 at gcd.rb:6
gcd.rb:6
if a > b
# where
--> #0 Object.gcd(a#Fixnum, b#Fixnum) at line gcd.rb:6
    #1 at line gcd.rb:18
# break main.gcd
Breakpoint 2 at ::gcd
# info break
Num Enb What
  1 y   at gcd.rb:6
  2 y   at :gcd
# continue
Breakpoint 1 at gcd.rb:6
gcd.rb:6
if a > b
# where
--> #0 Object.gcd(a#Fixnum, b#Fixnum) at line gcd.rb:6
    #1 Object.-(a#Fixnum, b#Fixnum) at line gcd.rb:15
    #2 at line gcd.rb:18
# c 10
gcd.rb:10
return nil if a <= 0
# info break
Num Enb What
  1 y   at gcd.rb:6
  2 y   at :gcd
# break foo
Unknown command
# info break
Num Enb What
  1 y   at gcd.rb:6
  2 y   at :gcd
# disable  1
# info break
Num Enb What
  1 n   at gcd.rb:6
  2 y   at :gcd
# enable breakpoint 1
# enable br 10
Enable breakpoints argument '10' needs to at most 2.
# delete 1
# info break
Num Enb What
  2 y   at :gcd
# enable
"enable" must be followed "display", "breakpoints" or breakpoint numbers.
# enable foo
Enable breakpoints argument 'foo' needs to be a number.
# disable bar
Disable breakpoints argument 'bar' needs to be a number.
# disable
"disable" must be followed "display", "breakpoints" or breakpoint numbers.
# # finish
# quit
