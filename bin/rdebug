#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require "ostruct"
require 'ruby-debug'

options = OpenStruct.new(
  'server'      => false,
  'client'      => false,
  'host'        => nil,
  'port'        => Debugger::PORT,
  'cport'       => Debugger::PORT + 1,
  'wait'        => false,
  'nostop'      => false,
  'post_mortem' => false,
  'script'      => nil,
  'tracing'     => false,
  'frame_info'  => false
)

opts = OptionParser.new do |opts|
  opts.banner = <<EOB
ruby-debug #{Debugger::VERSION}
Usage: rdebug [options] <script.rb> -- <script.rb parameters>
EOB
  opts.separator ""
  opts.separator "Options:"
  opts.on("-s", "--server", "Listen for remote connections") {options.server = true}
  opts.on("-c", "--client", "Connect to remote debugger") {options.client = true}
  opts.on("-h", "--host HOST", "Host name used for remote debugging") {|options.host|}
  opts.on("-w", "--wait", "Wait for a client connection, implies -s option") {options.wait = true}
  opts.on("-x", "--trace", "turn on line tracing") {options.tracing = true}
  opts.on("-n", "--nostop", "Do not stop when stript is loaded") {options.nostop = true}
  opts.on("-f", "--keep-frame-info", "Keep frame info") {options.frame_info = true}
  opts.on("-m", "--post-mortem", "Activate post-mortem mode") {options.post_mortem = true}
  opts.on("-p", "--port PORT", Integer, "Port used for remote debugging") {|options.port|}
  opts.on("-d", "--debug", "Debug self - prints information for debugging ruby-debug itself") do
    Debugger.is_debug = true
  end
  opts.on("-I", "--include PATH", String, "Add PATH to $LOAD_PATH") do |path|
    $LOAD_PATH.unshift(path)
  end
  opts.on("--script FILE", String, "Name of the script file to run") do |options.script| 
    unless File.exists?(options.script)
      puts "Script file '#{options.script}' is not found"
      exit(1)
    end
  end
  opts.on("--cport PORT", Integer, "Port used for contol commands, implies -s option") {|options.cport|}
  opts.on("-f", "--format FORMAT", String, "Name of the formatter to use (plain or xml)") do |format|
    unless %w[plain xml].include?(format)
      puts "Unknown format '#{options.format}'"
      exit(1)
    end
    Debugger.send "use_#{format}_printer"
  end
  opts.separator ""
  opts.separator "Common options:"
  opts.on_tail("--help", "Show this message") do
    puts opts
    exit
  end
  opts.on_tail("-v", "--version", "Show version") do
    puts "ruby-debug #{Debugger::VERSION}"
    exit
  end
end

begin
  Debugger::ARGV = ARGV.clone
  rdebug_path = File.expand_path($0)
  if RUBY_PLATFORM =~ /mswin/
    rdebug_path += ".cmd" unless rdebug_path =~ /\.cmd$/i
  end
  Debugger::RDEBUG_SCRIPT = rdebug_path
  opts.parse! ARGV
rescue StandardError => e
  puts opts
  puts
  puts e.message
  exit(1)
end

if options.client
  Debugger.start_client(options.host, options.port)
else
  if ARGV.empty?
    puts opts
    puts
    puts "Must specify a script to run"
    exit(1)
  end

  Debugger::PROG_SCRIPT = ARGV.shift
  trap('INT') { Debugger.interrupt_last }
  Debugger.stop_on_connect = !options.nostop
  Debugger.wait_connection = options.wait
  Debugger.keep_frame_info = options.frame_info
  load "#{ENV["HOME"]}/.rdebugrc" if File.exists?("#{ENV["HOME"]}/.rdebugrc")
  if options.server
    Debugger.start_remote(options.host, [options.port, options.cport], options.post_mortem)
    Debugger.debug_load Debugger::PROG_SCRIPT
  else
    Debugger.start
    if options.script
      Debugger.run_script(options.script)
    end
    Debugger.post_mortem if options.post_mortem
    if options.tracing
      Debugger.tracing = true
    else
      debugger 2 unless options.nostop
    end
    Debugger.debug_load Debugger::PROG_SCRIPT
  end
end